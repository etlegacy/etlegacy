# ______   _______   _
#|  ____| |__   __| | |
#| |__       | |    | |        ___    __ _    __ _    ___   _   _
#|  __|      | |    | |       / _ \  / _` |  / _` |  / __| | | | |
#| |____     | |    | |____  |  __/ | (_| | | (_| | | (__  | |_| |
#|______|    |_|    |______|  \___|  \__, |  \__,_|  \___|  \__, |
#                                     __/ |                  __/ |
#                                    |___/                  |___/
# 2021 Legacy team
name: ETLBuild

on:
#  pull_request:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * FRI'

jobs:

#   __  __               _                                                  _     _
#  |  \/  |             | |                                                | |   (_)
#  | \  / |   ___     __| |     __ _    ___   _ __     ___   _ __    __ _  | |_   _    ___    _ __
#  | |\/| |  / _ \   / _` |    / _` |  / _ \ | '_ \   / _ \ | '__|  / _` | | __| | |  / _ \  | '_ \
#  | |  | | | (_) | | (_| |   | (_| | |  __/ | | | | |  __/ | |    | (_| | | |_  | | | (_) | | | | |
#  |_|  |_|  \___/   \__,_|    \__, |  \___| |_| |_|  \___| |_|     \__,_|  \__| |_|  \___/  |_| |_|
#                               __/ |
#                              |___/

  lnx64-mod:
    runs-on: ubuntu-18.04
    container:
      image: etlegacy/lnx-build:centos7-wayland-x11
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Build
        shell: bash
        run: |
          git fetch --tags --force
          ./easybuild.sh build -64 -mod

      - uses: actions/upload-artifact@v2
        with:
          name: lnx64-mod
          path: |
            build/legacy/cgame*.so
            build/legacy/ui*.so

  osx-mod:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Install dependencies
        run: brew bundle

      - name: List dev tools
        run: |
          ls -la /Applications/ | grep Xcode
          ls -la /Library/Developer/CommandLineTools/SDKs/
          xcode-select --print-path
          xcrun -sdk macosx --show-sdk-path

      - name: Build
        env:
          SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
          DEVELOPER_DIR: /Library/Developer/CommandLineTools
        shell: bash
        run: |
          git fetch --tags --force
          ./easybuild.sh build -64 -mod --osx=10.10

      - uses: actions/upload-artifact@v2
        with:
          name: osx-mod
          path: |
            build/legacy/cgame_mac
            build/legacy/ui_mac

  win-mod:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Build
        shell: cmd
        run: |
          git fetch --tags --force
          call .\easybuild.bat build -mod

      - uses: actions/upload-artifact@v2
        with:
          name: win-mod
          path: |
            build/legacy/cgame*.dll
            build/legacy/ui*.dll

  raspberry_pi-mod:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        include:
          - arch: armv7
            distro: buster
    steps:
      - uses: actions/checkout@v2.1.0
        with:
          submodules: true
          fetch-depth: 0

      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build on ${{ matrix.arch }}
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          run: |
            apt-get update -q -y
            apt-get -y install build-essential libudev-dev libwebp-dev automake zlib1g \
            nasm autoconf cmake git zip gcc g++ libtool
            git fetch --tags --force
            ./easybuild.sh build -RPI -mod

      - uses: actions/upload-artifact@v2
        with:
          name: raspberry_pi-mod
          path: |
            build/legacy/cgame*.so
            build/legacy/ui*.so

  android-mod:
    runs-on: ubuntu-18.04
    env:
          SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_SIGN_APK_ALLIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_SIGN_APK_PASS }}
          SIGNING_STORE_PASSWORD: ${{ secrets.ANDROID_SIGN_APK_PASS }}
    container:
      image: rafal1137/etl_android
    steps:
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Android Repo
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Downloading NDK
        uses: actions/checkout@v2
        with:
          repository: rafal1137/NDK_ETL
          path: NDK_ETL

      - name: Build
        run: |
          chmod -R 775 $GITHUB_WORKSPACE/NDK_ETL/ndk-bundle
          echo "cmake.dir=/usr/" | tee -a local.properties
          echo "ndk.dir=$GITHUB_WORKSPACE/NDK_ETL/ndk-bundle" | tee -a local.properties
          ./gradlew clean build
          ls -R

      - name: Upload arm64-v8a
        uses: actions/upload-artifact@v2
        with:
          name: android-mod
          path: |
            app/build/intermediates/transforms/mergeJniLibs/release/0/lib/arm64-v8a/libcgame*.so
            app/build/intermediates/transforms/mergeJniLibs/release/0/lib/arm64-v8a/libui*.so

      - name: Upload armeabi-v7a
        uses: actions/upload-artifact@v2
        with:
          name: android-mod
          path: |
            app/build/intermediates/transforms/mergeJniLibs/release/0/lib/armeabi-v7a/libcgame*.so
            app/build/intermediates/transforms/mergeJniLibs/release/0/lib/armeabi-v7a/libui*.so

#   __  __                                                          _
#  |  \/  |                                                        | |
#  | \  / |   ___   _ __    __ _    ___     _ __ ___     ___     __| |  ___
#  | |\/| |  / _ \ | '__|  / _` |  / _ \   | '_ ` _ \   / _ \   / _` | / __|
#  | |  | | |  __/ | |    | (_| | |  __/   | | | | | | | (_) | | (_| | \__ \
#  |_|  |_|  \___| |_|     \__, |  \___|   |_| |_| |_|  \___/   \__,_| |___/
#                           __/ |
#                          |___/
# Since lnx32 is installing the most, use it as the step that combines all the other steps mod files.
# This step also generates the final packages for 32 bit lnx.
  lnx32:
    runs-on: ubuntu-18.04
    container:
      image: etlegacy/lnx-build:centos7-wayland-x11
    needs: [ lnx64-mod, osx-mod, win-mod, raspberry_pi-mod, android-mod ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

# These are for the ubuntu build, our own build image has everything preinstalled.
#      - name: Install dependencies
#        run: |
#          sudo dpkg --add-architecture i386
#          sudo apt update
#          sudo apt install nasm gcc-multilib g++-multilib zip
#          sudo apt install libwayland-dev:i386 wayland-protocols libgl1-mesa-dev:i386 libglu1-mesa-dev:i386
#          sudo apt install libasound2-dev:i386 pulseaudio:i386 libpulse-dev zlib1g-dev:i386 libsnappy-dev:i386 liblz4-1:i386

      - name: Build
        shell: bash
        run: |
          git fetch --tags --force
          ./easybuild.sh build -32

      - uses: actions/download-artifact@v2
        with:
          path: build/legacy

      - name: Merge mod files
        shell: bash
        working-directory: build/legacy
        run: |
          zip -rvj legacy_*.pk3 win-mod/*.dll lnx64-mod/*.so osx-mod/* raspberry_pi-mod/*.so android-mod/*.so

      - uses: actions/upload-artifact@v2
        with:
          name: All-mods
          path: build/legacy/legacy_*.pk3

      - name: Generate packages
        shell: bash
        working-directory: build/
        run: cpack

      - uses: actions/upload-artifact@v2
        with:
          name: lnx32-packages
          path: |
            build/etlegacy-*.tar.gz
            build/etlegacy-*.sh

#   ______   _                   _                            _
#  |  ____| (_)                 | |                          | |
#  | |__     _   _ __     __ _  | |    _ __     __ _    ___  | | __   __ _    __ _    ___   ___
#  |  __|   | | | '_ \   / _` | | |   | '_ \   / _` |  / __| | |/ /  / _` |  / _` |  / _ \ / __|
#  | |      | | | | | | | (_| | | |   | |_) | | (_| | | (__  |   <  | (_| | | (_| | |  __/ \__ \
#  |_|      |_| |_| |_|  \__,_| |_|   | .__/   \__,_|  \___| |_|\_\  \__,_|  \__, |  \___| |___/
#                                     | |                                     __/ |
#                                     |_|                                    |___/
# Generate the final packages for 64lnx, Osx, Windows and RPI (armv7 only)
  lnx64:
    runs-on: ubuntu-18.04
    needs: [ lnx32 ]
    container:
      image: etlegacy/lnx-build:centos7-wayland-x11
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

# These are for the ubuntu build, our own build image has everything preinstalled.
#      - name: Install dependencies
#        run: |
#          sudo apt update
#          sudo apt install nasm libwayland-dev wayland-protocols libgl1-mesa-dev libglu1-mesa-dev libasound2-dev pulseaudio libpulse-dev

      - name: Build
        shell: bash
        run: |
          git fetch --tags --force
          ./easybuild.sh build -64

      - uses: actions/download-artifact@v2
        with:
          name: All-mods
          path: build/legacy

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: build/legacy

      - name: Generate packages
        shell: bash
        working-directory: build/
        run: cpack

      - uses: actions/upload-artifact@v2
        with:
          name: lnx64-packages
          path: |
            build/etlegacy-*.tar.gz
            build/etlegacy-*.sh

  osx:
    runs-on: macos-10.15
    needs: [ lnx32 ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Install dependencies
        run: |
          brew bundle
          brew install librsvg graphicsmagick

      - name: Build
        env:
          SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
          DEVELOPER_DIR: /Library/Developer/CommandLineTools
        shell: bash
        run: |
          git fetch --tags --force
          ./easybuild.sh build -64 --osx=10.10

      - uses: actions/download-artifact@v2
        with:
          name: All-mods
          path: build/legacy

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: build/legacy

      - name: Generate packages
        shell: bash
        run: ./easybuild.sh package -64 --osx=10.10

      - uses: actions/upload-artifact@v2
        with:
          name: osx-packages
          path: |
            build/etlegacy-*.tar.gz
            build/etlegacy-*.dmg

  win:
    runs-on: windows-2019
    needs: [ lnx32 ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Build
        shell: cmd
        run: |
          git fetch --tags --force
          call .\easybuild.bat build

      - uses: actions/download-artifact@v2
        with:
          name: All-mods
          path: build/legacy

      - name: Display structure of downloaded files
        run: dir
        working-directory: build/legacy

      - name: Generate packages
        shell: cmd
        working-directory: build
        run: cpack

      - uses: actions/upload-artifact@v2
        with:
          name: win-packages
          path: |
            build/etlegacy-*.exe
            build/etlegacy-*.zip

  android:
    runs-on: ubuntu-18.04
    env:
          SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_SIGN_APK_ALLIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_SIGN_APK_PASS }}
          SIGNING_STORE_PASSWORD: ${{ secrets.ANDROID_SIGN_APK_PASS }}
    needs: [ lnx32 ]
    container:
      image: rafal1137/etl_android
    steps:
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Android Repo
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Downloading NDK
        uses: actions/checkout@v2
        with:
          repository: rafal1137/NDK_ETL
          path: NDK_ETL

      - uses: actions/download-artifact@v2
        with:
          name: All-mods
          path: app/src/main/assets

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: app/src/main/assets

      - name: Build and Generate Package
        run: |
          chmod -R 775 $GITHUB_WORKSPACE/NDK_ETL/ndk-bundle
          echo "cmake.dir=/usr/" | tee -a local.properties
          echo "ndk.dir=$GITHUB_WORKSPACE/NDK_ETL/ndk-bundle" | tee -a local.properties
          ./gradlew clean assembleRelease
          ls -R

      - name: Rename APK
        run: |
          for FILE in ./app/build/outputs/apk/release/*; do mv $FILE ${FILE%-*}.apk; done
          ls app/build/outputs/apk/release

      - uses: actions/upload-artifact@v2
        with:
          name: android-packages
#          path: ${{steps.sign_app.outputs.signedReleaseFile}}
          path: app/build/outputs/apk/release/etlegacy*.apk

#   _    _           _                       _                         _      _____   _
#  | |  | |         | |                     | |                       | |    / ____| | |
#  | |  | |  _ __   | |   ___     __ _    __| |     __ _   _ __     __| |   | |      | |   ___    __ _   _ __    _   _   _ __
#  | |  | | | '_ \  | |  / _ \   / _` |  / _` |    / _` | | '_ \   / _` |   | |      | |  / _ \  / _` | | '_ \  | | | | | '_ \
#  | |__| | | |_) | | | | (_) | | (_| | | (_| |   | (_| | | | | | | (_| |   | |____  | | |  __/ | (_| | | | | | | |_| | | |_) |
#   \____/  | .__/  |_|  \___/   \__,_|  \__,_|    \__,_| |_| |_|  \__,_|    \_____| |_|  \___|  \__,_| |_| |_|  \__,_| | .__/
#           | |                                                                                                         | |
#           |_|                                                                                                         |_|

  upload:
    runs-on: ubuntu-18.04
    needs: [ lnx32, lnx64, osx, win, android ]
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            All-mods
            lnx64-mod
            osx-mod
            win-mod
            raspberry_pi-mod
            android-mod

      - name: Get version status
        id: vars
        run: |
          echo ::set-output name=hash_exists::$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.LEGACY_UPLOAD_CHECK_URL }}${{ github.sha }} 2>/dev/null)

      - uses: actions/download-artifact@v2
        if: ${{ steps.vars.outputs.hash_exists == '404' }}
        with:
          path: packages

      - name: Upload packages
        if: ${{ steps.vars.outputs.hash_exists == '404' }}
        shell: bash
        working-directory: packages
        run: |
          find lnx64-packages/ -name '*' -type f -exec curl --fail -H "Authorization: Bearer ${{ secrets.LEGACY_AUTH }}" -X POST -H "Content-Type: multipart/form-data" -F "data=@{}" -F "platform=lnx64" -F"sha=${{ github.sha }}" ${{ secrets.LEGACY_UPLOAD_URL }} \;
          find lnx32-packages/ -name '*' -type f -exec curl --fail -H "Authorization: Bearer ${{ secrets.LEGACY_AUTH }}" -X POST -H "Content-Type: multipart/form-data" -F "data=@{}" -F "platform=lnx32" -F"sha=${{ github.sha }}" ${{ secrets.LEGACY_UPLOAD_URL }} \;
          find osx-packages/ -name '*' -type f -exec curl --fail -H "Authorization: Bearer ${{ secrets.LEGACY_AUTH }}" -X POST -H "Content-Type: multipart/form-data" -F "data=@{}" -F "platform=osx64" -F"sha=${{ github.sha }}" ${{ secrets.LEGACY_UPLOAD_URL }} \;
          find win-packages/ -name '*' -type f -exec curl --fail -H "Authorization: Bearer ${{ secrets.LEGACY_AUTH }}" -X POST -H "Content-Type: multipart/form-data" -F "data=@{}" -F "platform=win32" -F"sha=${{ github.sha }}" ${{ secrets.LEGACY_UPLOAD_URL }} \;
          find android-packages/ -name '*' -type f -exec curl --fail -H "Authorization: Bearer ${{ secrets.LEGACY_AUTH }}" -X POST -H "Content-Type: multipart/form-data" -F "data=@{}" -F "platform=andro64" -F"sha=${{ github.sha }}" ${{ secrets.LEGACY_UPLOAD_URL }} \;

      - name: Discord notification
        if: ${{ steps.vars.outputs.hash_exists == '404' }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.PUBLISH_DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0.3.0
        with:
          args: "<@&673533235887865879> Build from ETLegacy: ${{ github.sha }} has been published.\nDownload at: https://www.etlegacy.com/workflow-files"

  docker:
    runs-on: ubuntu-18.04
    needs: [ lnx64 ]
    # only run on master when there is a release tag
    if: github.event.base_ref == 'refs/heads/master' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: lnx64-packages
          path: build/package

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Setup folder
        working-directory: build/package
        run: cp ../../misc/docker/dedicated.Dockerfile ./Dockerfile

      - name: Package folder contents
        working-directory: build/package
        run: |
          ls -R

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Get the version
        id: vars
        run: |
          echo ::set-output name=tag::$(git describe --abbrev=7 2>/dev/null)
          echo ::set-output name=short_tag::$(git describe --abbrev=0 2>/dev/null)
          echo ::set-output name=tag_exists::$(curl -s -o /dev/null -w "%{http_code}" https://hub.docker.com/v1/repositories/etlegacy/server/tags/${{ steps.vars.outputs.tag }} 2>/dev/null)

      - name: Build and push the tagged Docker image
        if: ${{ steps.vars.outputs.tag_exists == '404' }} && ${{ github.event_name != 'schedule' }}
        working-directory: build/package
        run: |
          docker build . --file Dockerfile --tag etlegacy/server:${{ steps.vars.outputs.tag }}
          docker push etlegacy/server:${{steps.vars.outputs.tag}}

      # Create weekly tag when scheduled and update when triggered on docker hub
      - name: Build and push the weekly Docker image
        if: ${{ github.event_name == 'schedule' }}
        working-directory: build/package
        run: |
          docker build . --file Dockerfile --tag etlegacy/server:weekly
          docker push etlegacy/server:weekly

      # If we are on a release tag, then also create the 'latest' tag on docker hub
      - name: Build and push the latest Docker image
        if: ${{ steps.vars.outputs.tag == steps.vars.outputs.short_tag && steps.vars.outputs.tag_exists == '404' }}
        working-directory: build/package
        run: |
          docker build . --file Dockerfile --tag etlegacy/server:latest
          docker push etlegacy/server:latest

  cleanup:
    runs-on: ubuntu-18.04
    if: always()
    needs: [ upload, docker ]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            lnx64-packages
            lnx32-packages
            osx-packages
            win-packages
            android-packages

      - uses: geekyeggo/delete-artifact@v1
        if: github.ref != 'refs/heads/master'
        with:
          failOnError: false
          name: |
            All-mods
            lnx64-mod
            osx-mod
            win-mod
            raspberry_pi-mod
            android-mod
